# Copyright (c) 2025 AshokShau
# Licensed under the GNU AGPL v3.0: https://www.gnu.org/licenses/agpl-3.0.html
# Part of the TgMusicBot project. All rights reserved where applicable.

#  NOTE: DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING.
#  Configure environment variables using a `.env` file instead.

import os
import shutil
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv

from TgMusic.logger import LOGGER

load_dotenv()


class BotConfig:
    """Manages and validates all bot configuration from environment variables.

    This class reads essential and optional settings from the environment,
    validates their presence and format, and provides a centralized point of
    access to configuration values. It raises errors for missing critical
    configurations to prevent the bot from running in an improper state.

    Attributes:
        API_ID (Optional[int]): The Telegram API ID.
        API_HASH (Optional[str]): The Telegram API hash.
        TOKEN (Optional[str]): The bot's Telegram token.
        SESSION_STRINGS (list[str]): A list of pyrogram session strings.
        MONGO_URI (Optional[str]): The MongoDB connection URI.
        DB_NAME (str): The name of the database to use.
        API_URL (str): The URL for the external music API.
        API_KEY (Optional[str]): The API key for the music API.
        OWNER_ID (int): The user ID of the bot's owner.
        LOGGER_ID (int): The chat ID for the bot's log channel.
        PROXY (Optional[str]): An optional proxy URL.
        DEFAULT_SERVICE (str): The default music service to use for searches.
        MIN_MEMBER_COUNT (int): The minimum number of members a group must
            have for the bot to stay.
        MAX_FILE_SIZE (int): The maximum file size for downloads in bytes.
        DOWNLOADS_DIR (Path): The directory to store downloaded music.
        SUPPORT_GROUP (str): The URL for the support group.
        SUPPORT_CHANNEL (str): The URL for the support channel.
        START_IMG (str): The URL for the start command's image.
        IGNORE_BACKGROUND_UPDATES (bool): Flag to ignore background updates.
        AUTO_LEAVE (bool): Flag to enable automatic leaving of chats.
        NO_UPDATES (bool): Flag to disable update checks.
        COOKIES_URL (list[str]): A list of URLs for browser cookies.
        DEVS (list[int]): A list of developer user IDs.
    """

    def __init__(self):
        """Initializes the BotConfig class by loading and validating settings."""
        # Core Bot Configuration
        self.API_ID: Optional[int] = self._get_env_int("API_ID")
        self.API_HASH: Optional[str] = os.getenv("API_HASH")
        self.TOKEN: Optional[str] = os.getenv("TOKEN")

        self.SESSION_STRINGS: list[str] = self._get_session_strings()
        self.MONGO_URI: Optional[str] = os.getenv("MONGO_URI")
        self.DB_NAME: str = os.getenv("DB_NAME", "MusicBot")
        self.API_URL: str = os.getenv("API_URL", "https://tgmusic.fallenapi.fun")
        self.API_KEY: Optional[str] = os.getenv("API_KEY")

        # Owner and Logger
        self.OWNER_ID: int = self._get_env_int("OWNER_ID", 5938660179)
        self.LOGGER_ID: int = self._get_env_int("LOGGER_ID", -1002166934878)

        # Optional Settings
        self.PROXY: Optional[str] = os.getenv("PROXY")
        self.DEFAULT_SERVICE: str = os.getenv("DEFAULT_SERVICE", "youtube").lower()
        self.MIN_MEMBER_COUNT: int = self._get_env_int("MIN_MEMBER_COUNT", 50)
        self.MAX_FILE_SIZE: int = self._get_env_int(
            "MAX_FILE_SIZE", 500 * 1024 * 1024
        )  # 500MB default

        self.DOWNLOADS_DIR: Path = Path(os.getenv("DOWNLOADS_DIR", "database/music"))

        self.SUPPORT_GROUP: str = os.getenv(
            "SUPPORT_GROUP", "https://t.me/GuardxSupport"
        )
        self.SUPPORT_CHANNEL: str = os.getenv(
            "SUPPORT_CHANNEL", "https://t.me/FallenProjects"
        )

        self.START_IMG: str = os.getenv(
            "START_IMG",
            "https://i.pinimg.com/1200x/e8/89/d3/e889d394e0afddfb0eb1df0ab663df95.jpg",
        )

        self.IGNORE_BACKGROUND_UPDATES: bool = self._get_env_bool(
            "IGNORE_BACKGROUND_UPDATES", True
        )
        self.AUTO_LEAVE: bool = self._get_env_bool("AUTO_LEAVE", False)
        self.NO_UPDATES: bool = self._get_env_bool("NO_UPDATES", False)

        # Cookies
        self.COOKIES_URL: list[str] = self._process_cookie_urls(
            os.getenv("COOKIES_URL")
        )

        # Developer
        devs_env: Optional[str] = os.getenv("DEVS")
        self.DEVS: list[int] = list(map(int, devs_env.split())) if devs_env else []
        if self.OWNER_ID and self.OWNER_ID not in self.DEVS:
            self.DEVS.append(self.OWNER_ID)

        # Validate configuration
        self._validate_config()

    @staticmethod
    def _get_env_int(name: str, default: Optional[int] = None) -> Optional[int]:
        """Retrieves and converts an environment variable to an integer.

        If the environment variable is not set or cannot be converted to an
        integer, a warning is logged and the default value is returned.

        Args:
            name (str): The name of the environment variable.
            default (Optional[int]): The fallback value if the variable is
                not found or invalid. Defaults to None.

        Returns:
            Optional[int]: The parsed integer, or the default value.
        """
        value = os.getenv(name)
        try:
            return int(value)
        except (TypeError, ValueError):
            LOGGER.warning(
                "Invalid value for %s: %s (default: %s)", name, value, default
            )
            return default

    @staticmethod
    def _get_env_bool(name: str, default: bool = False) -> bool:
        """Retrieves and interprets an environment variable as a boolean.

        The value is considered True if it is the string "true" (case-insensitive).
        Otherwise, it is False.

        Args:
            name (str): The name of the environment variable.
            default (bool): The default value if the variable is not set.
                Defaults to False.

        Returns:
            bool: The parsed boolean value.
        """
        return os.getenv(name, str(default)).lower() == "true"

    @staticmethod
    def _get_session_strings(prefix: str = "STRING", count: int = 10) -> list[str]:
        """Retrieves multiple session strings from environment variables.

        This function looks for environment variables with a given prefix
        followed by a number (e.g., STRING1, STRING2) and collects their values.

        Args:
            prefix (str): The prefix for the session string environment variables.
                Defaults to "STRING".
            count (int): The number of session keys to check for. Defaults to 10.

        Returns:
            list[str]: A list of the session strings found.
        """
        return [
            s.strip() for i in range(1, count + 1) if (s := os.getenv(f"{prefix}{i}"))
        ]

    @staticmethod
    def _process_cookie_urls(value: Optional[str]) -> list[str]:
        """Parses a string of URLs into a list.

        The input string can contain URLs separated by spaces or commas.

        Args:
            value (Optional[str]): The raw string of URLs from the environment
                variable.

        Returns:
            list[str]: A list of cleaned URL strings.
        """
        if not value:
            return []
        return [url.strip() for url in value.replace(",", " ").split() if url.strip()]

    def _validate_config(self) -> None:
        """Validates that all required configuration values are present and valid.

        This method checks for the existence of critical environment variables
        and ensures that necessary directories are created. It will raise a
        `ValueError` or `RuntimeError` if validation fails.
        """
        if missing := [
            name
            for name in (
                "API_ID",
                "API_HASH",
                "TOKEN",
                "MONGO_URI",
                "LOGGER_ID",
                "DB_NAME",
                "START_IMG",
            )
            if not getattr(self, name)
        ]:
            raise ValueError(f"Missing required config: {', '.join(missing)}")

        if not isinstance(self.MONGO_URI, str):
            raise ValueError("MONGO_URI must be a string")

        if not self.SESSION_STRINGS:
            raise ValueError("At least one session string (STRING1â€“10) is required")

        if self.IGNORE_BACKGROUND_UPDATES:
            db_path = Path("database")
            if db_path.exists():
                shutil.rmtree(db_path)

        try:
            self.DOWNLOADS_DIR.mkdir(parents=True, exist_ok=True)
            Path("database/photos").mkdir(parents=True, exist_ok=True)
        except Exception as e:
            raise RuntimeError(f"Failed to create required directories: {e}") from e


config: BotConfig = BotConfig()
